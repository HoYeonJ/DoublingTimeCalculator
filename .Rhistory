}
for (y in (1:ncol)){
for (x in (1:row/30)){
cellGrowthThirty = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = matrix(0, row/30, newcol)
for (y in (1:ncol)){
for (x in (1:row/30)){
cellGrowthThirty = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
for (y in (1:newcol)){
for (x in (1:row/30)){
cellGrowthThirty = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,(1:newcol)], which.max)
# Find the max of each column
maxes = sapply(cellGrowthThirty, which.max)
for (y in (1:newcol)){
for (x in (1:row/30)){
cellGrowthThirty[x,y] = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
cellGrowthThirty = as.data.frame(matrix(0, row/30, newcol))
for (y in (1:newcol)){
for (x in (1:row/30)){
cellGrowthThirty[x,y] = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty, which.max)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row/30, newcol))
for (y in (1:newcol)){
for (x in (1:row/30)){
cellGrowthThirty[x,y] = (cellGrowth[x*30,y+1]-cellGrowth[x*30-29,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row/100, newcol))
for (y in (1:newcol)){
for (x in (1:row/100)){
cellGrowthThirty[x,y] = (cellGrowth[x*100,y+1]-cellGrowth[x*100-99,y+1])/100
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row/10, newcol))
for (y in (1:newcol)){
for (x in (1:row/10)){
cellGrowthThirty[x,y] = (cellGrowth[x*10,y+1]-cellGrowth[x*10-9,y+1])/10
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]+5
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y-1]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]*10+5
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y-1]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row/100, newcol))
for (y in (1:newcol)){
for (x in (1:row/100)){
cellGrowthThirty[x,y] = (cellGrowth[x*100,y+1]-cellGrowth[x*100-99,y+1])/10
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]*100-50
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y-1]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row/4, newcol))
for (y in (1:newcol)){
for (x in (1:row/4)){
cellGrowthThirty[x,y] = (cellGrowth[x*4,y+1]-cellGrowth[x*4-3,y+1])/10
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]*4-2
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y-1]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row-30, newcol))
for (y in (1:newcol)){
for (x in (1:row-30)){
cellGrowthThirty[x,y] = (cellGrowth[x+30,y+1]-cellGrowth[x,y+1])/30
}
}
cellGrowthThirty = as.data.frame(matrix(0, row, newcol))
for (y in (1:newcol)){
for (x in (1:row-30)){
cellGrowthThirty[x,y] = (cellGrowth[x+30,y+1]-cellGrowth[x,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y-1]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]+15
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Import the data--note: it can have any number of columns but "Time" needs to
# be in the first and the growth of each well comes is in the columns after
cellGrowth = read.csv(file = 'exampleFile.csv')
col = ncol(cellGrowth)
row = nrow(cellGrowth)
times = cellGrowth[,(1:1)]
# Log transform the growth columns
#cellGrowthLog = log(cellGrowth[,(2:col)])
cellGrowthLog = cellGrowth[,(2:col)]
# Find the increments instead of the raw magnitude (to calculate the steepest
# part of the curve)
newcol = col-1
cellGrowthLog[(2:row),(1:newcol)] = cellGrowthLog[(2:row),(1:newcol)]-
cellGrowthLog[(1:row-1),(1:newcol)]
cellGrowthLog[(1),(1:newcol)]=0
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row, newcol))
for (y in (1:newcol)){
for (x in (1:row-30)){
cellGrowthThirty[x,y] = (cellGrowth[x+30,y+1]-cellGrowth[x,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]+15
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
# Import the data--note: it can have any number of columns but "Time" needs to
# be in the first and the growth of each well comes is in the columns after
cellGrowth = read.csv(file = 'exampleFile.csv')
col = ncol(cellGrowth)
row = nrow(cellGrowth)
times = cellGrowth[,(1:1)]
# Log transform the growth columns
#cellGrowthLog = log(cellGrowth[,(2:col)])
cellGrowthLog = cellGrowth[,(2:col)]
# Find the increments instead of the raw magnitude (to calculate the steepest
# part of the curve)
newcol = col-1
cellGrowthLog[(2:row),(1:newcol)] = cellGrowthLog[(2:row),(1:newcol)]-
cellGrowthLog[(1:row-1),(1:newcol)]
cellGrowthLog[(1),(1:newcol)]=0
# Import the data--note: it can have any number of columns but "Time" needs to
# be in the first and the growth of each well comes is in the columns after
cellGrowth = read.csv(file = 'exampleFile.csv')
col = ncol(cellGrowth)
row = nrow(cellGrowth)
times = cellGrowth[,(1:1)]
# Log transform the growth columns
#cellGrowthLog = log(cellGrowth[,(2:col)])
cellGrowthLog = cellGrowth[,(2:col)]
# Find the increments instead of the raw magnitude (to calculate the steepest
# part of the curve)
newcol = col-1
cellGrowthLog[(2:row),(1:newcol)] = cellGrowthLog[(2:row),(1:newcol)]-
cellGrowthLog[(1:row-1),(1:newcol)]
cellGrowthLog[(1),(1:newcol)]=0
# Take increments of 30 and find the slope of the secant line
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row, newcol))
for (y in (1:newcol)){
for (x in (1:row-30)){
cellGrowthThirty[x,y] = (cellGrowth[x+30,y+1]-cellGrowth[x,y+1])/30
}
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]+15
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-15: center+15), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-15: center+15),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
}
print(arr)
print(timesarr)
print(summary(model))
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
#print(windows)
timesarr[y] = times[center]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
print(coefficients(model)[2])
arr[y]=log(2)/coefficients(model)[2]
print(summary(model))
}
print(arr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
mat[,y ]= c(log(2)/coefficients(model)[2], times[center], model$r.squared)
}
print(mat)
$summary.lm
?summary.lm
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
print(model$r.squared)
mat[,y ]= c(log(2)/coefficients(model)[2], times[center], model$r.squared)
}
# Take the 30 point window around the max
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
print(model$r.squared)
mat[,y ]= c(log(2)/coefficients(model)[2], times[center], r.squared(model))
}
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
print(model$r.squared)
timesarr[y] = times[center]
#mat[,y ]= c(log(2)/coefficients(model)[2], times[center], model$r.squared)
}
print(timesarr)
# Find the max of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 30 point window around the max
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = cellGrowth[(center-50: center+50),1]
model = lm(log(windows)~ x)
#print(model$r.squared)
timesarr[y] = times[center]
mat[,y ]= c(log(2)/coefficients(model)[2], times[center], summary(model)$r.squared)
}
print(mat)
# Take the 100 point window around the max to find the growth rate
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]
windows = cellGrowth[(center-50: center+50), y+1]
x = times[(center-50: center+50)]
model = lm(log(windows)~ x)
#print(model$r.squared)
timesarr[y] = times[center]
mat[,y ]= c(log(2)/coefficients(model)[2], times[center], summary(model)$r.squared)
}
print(mat)
# Import the data--note: it can have any number of columns but "Time" needs to
# be in the first and the growth of each well comes is in the columns after
cellGrowth = read.csv(file = 'exampleFile.csv')
col = ncol(cellGrowth)
row = nrow(cellGrowth)
times = cellGrowth[,(1:1)]
# Log transform the growth columns NOTE: ITS NOT ACTUALLY LOG TRANSFORMED RIGHT
# NOW
#cellGrowthLog = log(cellGrowth[,(2:col)])
cellGrowthLog = cellGrowth[,(2:col)]
# Find the increments instead of the raw magnitude (to calculate the steepest
# part of the curve)
newcol = col-1
cellGrowthLog[(2:row),(1:newcol)] = cellGrowthLog[(2:row),(1:newcol)]-
cellGrowthLog[(1:row-1),(1:newcol)]
cellGrowthLog[(1),(1:newcol)]=0
# Take increments of 30 and find the slope of the secant line
granularity = 30
newcol = col-1
cellGrowthThirty = as.data.frame(matrix(0, row, newcol))
for (y in (1:newcol)){
for (x in (1:row-granularity)){
cellGrowthThirty[x,y] = (cellGrowth[x+granularity,y+1]-cellGrowth[x,y+1])/
granularity
}
}
# Find the max steepest slope of each column
maxes = sapply(cellGrowthThirty[,1:newcol], which.max)
print(maxes)
# Take the 100 point window around the max to find the growth rate
mat = as.data.frame(matrix(0, 3, newcol))
arr = vector(mode = "double", length = newcol)
timesarr = vector(mode = "double", length = newcol)
for (y in (1:newcol)){
center= maxes[y]+granularity/2
# Absorbance
windows = cellGrowth[(center-50: center+50), y+1]
# Time
x = times[(center-50: center+50)]
# Linear regression after log transformation
model = lm(log(windows)~ x)
timesarr[y] = times[center]
mat[,y ]= c(log(2)/coefficients(model)[2], times[center],
summary(model)$r.squared)
}
print(mat)
